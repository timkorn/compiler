#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

typedef struct variables
{
    char v[200][100];
    int line[200];
    int find[200][100];
    int cur;
    int cur_f;
};

typedef struct functions
{
    char f[100][100];
    int line[100];
    char links[100][100];
    int cur;
    int cur_link;
};

//проверка
int h_control(char d[], char s[])
{
    int j = 0;
    for (int i = 0; i < 10; ++i)
    {
        if (s[i] == d[i])
        {
            j++;
        }
    }
    if (j == 10)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int equal(char names[], char data[], int l, int i)
{
    int count = 0;
    for (int j = i; j < l; ++j)
    {
        if (data[j] == names[j - i])
        {
            count++;
        }
    }
    if (count == l)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int find_cycle(char data[][800],int count)
{
    int i = 0;
    int j;
    while (i < count)
    {
        j = 0;
        while (data[i][j] == '\t' || data[i][j] == ' ')
        {
            j++;
            if (data[i][j] == '{' && data[i-1][j]!='t')
            {
                return 1;
            }
        }
        ++i;
    }
    return 0;
}

int var_find(char data[], variables* current2,functions* current, int li)
{
    for (int i = 0; i < current2->cur; ++i)
    {
        if (li == current2->line[i])
        {
            return 0;
        }
    }
    char line[100];
    strncpy(line, data, strlen(data));
    for (int i = 0; i < strlen(line);++i)
    {
        if (line[i] == '/' && line[i + 1] == '/')
        {
            return 0;
        }
        if (line[i] == '(' || line[i] == '!' || line[i] == '*' || line[i] == '+' || line[i] == '/' || line[i] == '%' || line[i] == ',' || line[i] == ':' || line[i] == '&' || line[i] == '|' || line[i] == '{' || line[i] == '}' || line[i] == '\t')
        {
            line[i] = ' ';
        }
    }
    char stack[200][30];
    for (int i = 0; i < current->cur; ++i)
    {
        /// потом сделаю}
}

int function_detector(char data[], char names[][100], functions* current, int li, int time)
{
    if (time)
    {
        for (int i = 0; i < current->cur; ++i)
        {
            if (li == current->line[i])
            {
                return 0;
            }
        }
    }
    //чекнуть все названи€ в строкеfor (int i = 0; i < strlen(data); ++i)
    {
        //сдедать искл дл€ комментариевfor (int j = 0; j < 30; ++j)
        {
            if (equal(names[j], data, strlen(names[j]), i) || time)
            {
                for (int p = i + 1; p < strlen(data); ++p)
                {
                    if (p == strlen(data) - 1 && time)
                    {
                        return 0;
                    }
                    if (data[p] == '"')
                    {
                        while (data[p] != '"' && p < strlen(data))
                        {
                            ++p;
                        }
                        ++p;
                    }
                    if ((data[p] == '/' && data[p + 1] == '/') || data[p] == '/*')
                    {
                        return 0;
                    }
                    if (data[p] == '(')
                        ///доп усл на функцию --> Ё“ќ ‘”Ќ ÷»я{
                        char function[100];
                        p--;
                        while (data[p] != ' ' && data[p] != '(' && data[p] != '!' && data[p] != '*' && data[p] != '+' && data[p] != '/' && data[p] != '%' && data[p] != ',' && data[p] != ':' && data[p] != '&' && data[p] != '|' && data[p] != '{' && data[p] != '{' && p != -1 && data[p] != '\t')
                        {
                            p--;
                        }
                        p++;
                        int k = p;
                        while (data[p] != '(')
                        {
                            function[p - k] = data[p];
                            p++;
                        }
                        if (time == 0)
                        {
                            strncpy(current->f[current->cur], function, strlen(function));
                            current->line[current->cur] = li;
                            current->cur++;
                            return 0;
                        }
                        else
                        {
                            j = 30;
                            for (int m = 0; m < current->cur; ++m)
                            {
                                if (strlen(function) == strlen(current->f[m]) && equal(function, current->f[m], strlen(function), 0))
                                {
                                    for (int l = 0; l < current->cur; ++l)
                                    {
                                        if (li < current->line[l] || li>current->line[current->cur - 1])
                                        {
                                            if (li > current->line[current->cur - 1])
                                            {
                                                strncpy(current->links[current->cur_link], current->f[current->cur - 1], strlen(current->f[current->cur - 1]));
                                                strncpy(current->links[current->cur_link + 1], function, strlen(function));
                                                current->cur_link += 2;
                                                break;
                                            }
                                            else
                                            {
                                                strncpy(current->links[current->cur_link], current->f[l - 1], strlen(current->f[l - 1]));
                                                strncpy(current->links[current->cur_link + 1], function, strlen(function));
                                                current->cur_link += 2;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        }
                }
            }
        }
    }
}

int uslovie(char a[], int i, int* f) {
    if (a[i] == 'f' && a[i + 1] == 'o' && a[i + 2] == 'r' && (a[i + 3] == ' ' || a[i + 3] == '(') ||a[i] == 'w' && a[i + 1] == 'h' && a[i + 2] == 'i' && a[i + 3] == 'l' && a[i + 4] == 'e' ||a[i] == 'i' && a[i + 1] == 'f' && (a[i + 2] == ' ' || a[i + 2] == '('))
        return 1;
    if (a[i] == 's' && a[i + 1] == 't' && a[i + 2] == 'r' && a[i + 3] == 'u' && a[i + 4] == 'c')
        return 5;
    return *f;
}

void forma(char data[][800], char data2[][200])
{
    int ministack1 = 0, ministack2 = 0, ministack3 = 0, ministack4[100], o = 0, ftype = 0, fdef = 0, i1 = 0, j1 = 0, i = 0, j = 0, f1 = 0, f2 = 0, flag = 0, lvl = 0, f = 0, FC = 0;
    //flag=1 - '#' ;
    for (int z = 0; z < 84; z++)
    {
        for (j = 0; j < strlen(data[i]);)
        {
            if (f2 == 0)
                while (data[i][j] == '\t' || data[i][j] == ' ')
                {
                    j++;
                    f2 = 1;
                }
                if (f1 == 1)
                    if (data[i][j] == '\n')
                        j++;
                    else
                        if (data[i][j] != '#')
                        {
                            data2[i1][0] = '\n';
                            data2[i1][1] = '\0';
                            i1++;
                            f2 = 0;
                            f1 = 0;
                        }
                        else
                            f1 = 0;
                        if (data[i][j] == '/' && data[i][j + 1] == '*')
                        {
                            ministack3++;
                            FC = 1;
                            data[i][j + 1] = '/';
                            //i = i + 2;
                        }
                        while (data[i][j] == '*' && data[i][j + 1] == '/')
                        {
                            ministack3--;
                            j = j + 2;
                            if (ministack3 == 0)
                                FC = 0;
                        }
                        if (data[i][j] == '}' && data[i][j - 1] != '\'')
                        {
                            ministack2 = ministack4[o - 1];
                            o = o - 1;
                        }
                        if (j1 == 0 && data[i][j] != '\n')
                        {
                            while (data[i][j] == '\t' || data[i][j] == ' ')
                                j++;
                            if (f == 1 && data[i][j] != '{' && data[i][j - 1] != '\'')
                            {
                                ministack2++;
                                f = 2;
                            }
                            else
                                f = 0;
                            int w = 0;
                            for (j1 = 0; w < ministack2; w++)
                            {
                                data2[i1][j1] = ' ';
                                data2[i1][j1 + 1] = ' ';
                                data2[i1][j1 + 2] = ' ';
                                data2[i1][j1 + 3] = ' ';
                                j1 = j1 + 4;
                                f2 = 1;
                            }
                            if (data[i][j] == '/')
                                int r = 0;
                            else
                                if (FC == 1)
                                {
                                    data2[i1][j1] = '/';
                                    data2[i1][j1 + 1] = '/';
                                    j1 = j1 + 2;
                                    f2 = 1;
                                }
                        }
                        if (data[i][j] == '#' && data[i][j + 1] != '\'')
                        {
                            if (data[i][j + 1] == 'd')
                                fdef = 1;
                            flag = 1;
                            data2[i1][j1] = data[i][j];
                            f2 = 1;
                            j1++;
                            j++;
                        }
                        else
                            if (data[i][j] == 'e' && data[i][j + 1] == 'l' && data[i][j + 2] == 's' && data[i][j + 3] == 'e' && FC == 0)
                            {
                                f = 1;
                                for (int w = 0; w < 4; w++)
                                {
                                    data2[i1][j1] = data[i][j];
                                    f2 = 1;
                                    j++;
                                    j1++;
                                }
                                data2[i1][j1] = '\n';
                                j1++;
                                data2[i1][j1] = '\0';
                                j1 = 0;
                                i1++;
                                f2 = 0;
                            }
                            else
                                if (data[i][j] == '(' && data[i][j - 1] != '\'')
                                {
                                    ministack1++;
                                    data2[i1][j1] = data[i][j];
                                    f2 = 1;
                                    j++;
                                    j1++;
                                }
                                else
                                    if (FC == 0 && ((data[i][j] == '>' && flag == 1) || (data[i][j] == '"' && flag == 1) || (data[i][j] == ';' && ministack1 == 0) || (data[i][j] == '{' && data[i][j + 1] != '\'') || (data[i][j] == '}' && data[i][j + 1] != '\'')))
                                    {
                                        if (data[i][j] == '}' && o == 0)
                                        {
                                            if (o == 0)
                                                if (ftype == 0)
                                                {
                                                    data2[i1][j1] = data[i][j];
                                                    j++;
                                                    j1++;
                                                    data2[i1][j1] = '\n';
                                                    data2[i1][j1 + 1] = '\0';
                                                    i1++;
                                                    j1 = 0;
                                                    data2[i1][j1] = '\n';
                                                    data2[i1][j1 + 1] = '\0';
                                                    i1++;
                                                    j1 = 0;
                                                    f2 = 0;
                                                }
                                                else
                                                {
                                                    while (data[i][j] != ';')
                                                    {
                                                        data2[i1][j1] = data[i][j];
                                                        j++;
                                                        j1++;
                                                    }
                                                    data2[i1][j1] = data[i][j];
                                                    j++;
                                                    j1++;
                                                    ftype = 0;
                                                    data2[i1][j1] = '\n';
                                                    j1++;
                                                    data2[i1][j1] = '\0';
                                                    j1 = 0;
                                                    i1++;
                                                    data2[i1][j1] = '\n';
                                                    j1++;
                                                    data2[i1][j1] = '\0';
                                                    j1 = 0;
                                                    i1++;
                                                    f2 = 0;
                                                }
                                        }
                                        else
                                        {
                                            if (data[i][j] == '>' || data[i][j] == '"')
                                                f1 = 1;
                                            if (data[i][j] == '{')
                                            {
                                                if (ftype == 1 && o == 0)
                                                {
                                                    data2[i1][j1] = '\n';
                                                    j1++;
                                                    data2[i1][j1] = '\0';
                                                    j1 = 0;
                                                    i1++;
                                                    f2 = 0;
                                                    ministack4[o] = ministack2;
                                                    o++;
                                                    ministack2++;
                                                }
                                                else
                                                {
                                                    ministack4[o] = ministack2;
                                                    o++;
                                                    ministack2++;
                                                }
                                            }
                                            if (f == 2)
                                                ministack2--;
                                            flag = 0;
                                            data2[i1][j1] = data[i][j];
                                            j++;
                                            j1++;
                                            data2[i1][j1] = '\n';
                                            j1++;
                                            data2[i1][j1] = '\0';
                                            j1 = 0;
                                            i1++;
                                            f2 = 0;
                                        }
                                    }
                                    else
                                        if (data[i][j] == ')' && j + 1 <= strlen(data[i]) && data[i][j + 1] != '\'')
                                        {
                                            data2[i1][j1] = data[i][j];
                                            f2 = 1;
                                            j++;
                                            j1++;
                                            ministack1--;
                                            if ((data[i][j] == '{' && ministack1 == 0) || (data[i][j] == '{' && ftype == 1))
                                            {
                                                data2[i1][j1] = '\n';
                                                j1++;
                                                data2[i1][j1] = '\0';
                                                j1 = 0;
                                                i1++;
                                                data2[i1][j1] = data[i][j];
                                                j++;
                                                j1++;
                                                data2[i1][j1] = '\n';
                                                j1++;
                                                data2[i1][j1] = '\0';
                                                j1 = 0;
                                                i1++;
                                                ministack4[o] = ministack2;
                                                o++;
                                                ministack2++;
                                                f2 = 0;
                                            }
                                            else
                                                if (ministack1 == 0 && data[i][j] != '{' && data[i][j] != ';')
                                                {
                                                    data2[i1][j1] = '\n';
                                                    j1++;
                                                    data2[i1][j1] = '\0';
                                                    j1 = 0;
                                                    i1++;
                                                    f2 = 0;
                                                }
                                        }
                                        else
                                            if (j != 0 && (data[i][j] == '\n' || data[i][j] == '\0') && FC == 0 && fdef != 2)
                                            {
                                                int r = 0;
                                                j++;
                                            }
                                            else
                                            {
                                                if ((fdef == 1 || fdef == 2) && (data[i][j] == ' ' || data[i][j] == '\n'))
                                                {
                                                    if (fdef == 1)
                                                    {
                                                        data2[i1][j1] = data[i][j];
                                                        j1++;
                                                    }
                                                    j++;
                                                    fdef++;
                                                    if (fdef == 3)
                                                    {
                                                        data2[i1][j1] = '\n';
                                                        j1++;
                                                        data2[i1][j1] = '\0';
                                                        j1 = 0;
                                                        i1++;
                                                        f2 = 0;
                                                        fdef = 0;
                                                    }
                                                }
                                                else
                                                {
                                                    f = uslovie(data[i], j, &f);
                                                    if (f == 5)
                                                    {
                                                        f = 0;
                                                        ftype = 1;
                                                    }
                                                    data2[i1][j1] = data[i][j];
                                                    f2 = 1;
                                                    j1++;
                                                    if (data[i][j] == '\n')
                                                    {
                                                        data2[i1][j1] = '\0';
                                                        j1 = 0;
                                                        i1++;
                                                        f2 = 0;
                                                    }
                                                    j++;
                                                }
                                            }
        }
        i++;
    }
}

int equal_v(char names[], char data[], int l, int i)
{
    int count = 0;
    for (int j = i; j - i < l; ++j)
    {
        if (data[j] == names[j - i])
        {
            count++;
        }
    }
    if (count == l && data[count + i] == ' ')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int variables_detector(char data[], char names[][100], functions* current, variables* current2, int li, int time)
{
    for (int i = 0; i < current->cur; ++i)
    {
        if (li == current->line[i])
        {
            return 0;
        }
    }
    for (int i = 0; i < current2->cur; ++i)
    {
        if (li == current2->line[i])
        {
            return 0;
        }
    }
    for (int i = 0; i < strlen(data); ++i)
    {
        //сделать искл дл€ комментариевint x = 0;
        for (int j = 0; j < 30; ++j)
        {
            if (equal_v(names[j], data, strlen(names[j]), i) || time)
            {
                for (int p = i + 1; p < strlen(data); ++p)
                {
                    if (p == strlen(data) - 1 && time)
                    {
                        return 0;
                    }
                    char variable[100];
                    if (data[p] == '=')
                    {
                        p -= 2;
                        while (data[p] != ' ')
                        {
                            p--;
                        }
                        p++;
                        int k = p;
                        while (data[p] != ' ')
                        {
                            variable[p - k] = data[p];
                            p++;
                        }
                        if (time == 0)
                        {
                            strncpy(current2->v[current2->cur], variable, strlen(variable));
                            current2->line[current2->cur] = li;
                            current2->cur++;
                            return x;
                        }
                    }
                    if (data[p] == ';')
                    {
                        p -= 1;
                        while (data[p] != ' ')
                        {
                            p--;
                        }
                        p++;
                        int k = p;
                        while (data[p] != ';')
                        {
                            variable[p - k] = data[p];
                            p++;
                        }
                        if (time == 0)
                        {
                            strncpy(current2->v[current2->cur], variable, strlen(variable));
                            current2->line[current2->cur] = li;
                            current2->cur++;
                            x = 1;
                            return x;
                        }
                    }
                }
            }
        }
    }
}

void clean(char a[])
{
    for (int i = 0; i < strlen(a);++i)
    {
        a[i] = '\0';
    }
}

void function_using(functions* current)
{
    for (int i = 0;i < current->cur;++i)
    {
        for (int j = 0; j < current->cur_link;j++)
        {
            if (strlen(current->f[i]) == strlen(current->links[j]) && equal(current->f[i], current->links[j], strlen(current->f[i]), 0))
            {
                clean(current->f[i]);
                break;
            }
        }
    }
    int k = 0;
    char not_use[100][100];
    for (int i = 0;i < current->cur;++i)
    {
        if (strlen(current->f[i]) != 0)
        {
            strncpy(not_use[k], current->f[i], strlen(current->f[i]));
            k++;
        }
    }
    if (k)
    {
        printf("¬ программе есть неиспользованные функции:");
        for (int i = 0; i < k;++i)
        {
            printf("%s ",not_use[i]);
        }
        printf("\n");
    }
    else
    {
        printf("¬ программе нет неиспользованных функций\n");
    }
}

//void copy(char a[],char b[]) // из а в б
//{
//int p = 0;
//while (a[p] != '\0')

//{
//char x = a[p];
//b[p] = x;
//++p;
//}
//}
void recursion(functions* current)
{
    int j = 0, k = 0;
    char recursion[100][100];
    while (strcmp(current->links[j], ""))
    {
        if (strcmp(current->links[j], current->links[j + 1]) == 0)
        {
            strcpy(recursion[k], current->links[j]);
            k++;
        }
        j += 2;
    }
    if (k > 0)
    {
        printf("¬ программе есть рекурсивные функции: ");
        for (int i = 0; i < k; ++i)
        {
            printf("%s ", recursion[i]);
        }
        printf("\n");
    }
    else
    {
        printf("¬ программе нет рекурсивных функций.\n");
    }
}

void nested_loops(char data[][800], int count)
{
    int mx = 0, cur = 0, i = 0, j;
    int struc_brack = 0;
    int brackets[100];
    int count_brack = 0;
    while (i < count)
    {
        j = 0;
        while (data[i][j] == '\t' || data[i][j] == ' ')
            j++;
        if (data[i][j] == '{')
        {
            brackets[count_brack] = -1;
            count_brack++;
        }
        else
            if (data[i][j] == '}')
            {
                if (j == brackets[count_brack - 1])
                {
                    if (cur > mx)
                        mx = cur;
                    cur -= 1;
                }
                count_brack--;
            }
            else
                if ((data[i][j] == 'f' && data[i][j + 1] == 'o' && data[i][j + 2] == 'r' && data[i][j + 3] == ' ') || (data[i][j] == 'w' && data[i][j + 1] == 'h' && data[i][j + 2] == 'i' && data[i][j + 3] == 'l' && data[i][j + 4] == 'e' && data[i][j + 5] == ' '))
                {
                    i++;
                    if (data[i][j] != '{')
                    {
                        if (cur + 1 > mx)
                            mx = cur;
                    }
                    else
                    {
                        brackets[count_brack] = j;
                        count_brack++;
                        cur++;
                        if (cur > mx)
                            mx = cur;
                    }
                }
                i++;
    }
    printf("ћаксимальна€ вложенность циклов в коде равна %d", mx);
}

int main()
{
    setlocale(LC_ALL, "Rus");
    int h_line = 0;
    int i = 0;
    char path[100];
    char path_txt[100];
    fgets(path, 1000, stdin);
    path[strlen(path) - 1] = '\0';
    strncpy(path_txt, path, strlen(path));
    path_txt[strlen(path_txt) - 1] = 't';
    path_txt[strlen(path_txt) - 2] = 'x';
    path_txt[strlen(path_txt) - 3] = 't';
    s[strlen(s)] = '"';
    char data[800][800], data2[800][200];
    if (-1 == rename(path, path_txt))
    {
        perror("Error");
    }
    FILE* inp = fopen(path_txt, "r+");
    while (!feof(inp))
    {
        fgets(data[i], 1000, inp);
        //data[i][strlen(data[i]) - 1] = '\0';
        if (h_control(data[i], s))
        {
            int j;
            char path_h[100];
            char path_h_txt[100];
            strncpy(path_h, path, strlen(path));
            strncpy(path_h_txt, path, strlen(path));
            char h[100];
            char h_txt[100];
            j = 10;
            while (data[i][j] != 34)
            {
                h[j - 10] = data[i][j];
                h_txt[j - 10] = data[i][j];
                j++;
            }
            h_txt[strlen(h) + 1] = 't';
            h_txt[strlen(h)] = 'x';
            h_txt[strlen(h) - 1] = 't';
            // включение в путь .h файлаj = strlen(path_h) - 1;
            while (path_h[j] != '\\')
            {
                path_h[j] = '\0';
                path_h_txt[j] = '\0';
                j--;
            }
            for (int i = j + 1; i < j + (strlen(h)) + 1; ++i)
            {
                path_h[i] = h[i - j - 1];
                path_h_txt[i] = h[i - j - 1];
            }
            int x = strlen(path_h_txt);
            path_h_txt[x + 1] = 't';
            path_h_txt[x] = 'x';
            path_h_txt[x - 1] = 't';
            if (-1 == rename(path_h, path_h_txt))
            {
                perror("Error");
            }
            FILE* inp_h = fopen(path_h_txt, "r+");
            while (!(feof(inp_h)))
            {
                ++i;
                fgets(data[i], 10000, inp_h);
                //data[i][strlen(data[i]) - 1] = '\0';
            }
            fclose(inp_h);
            rename(path_h_txt, path_h);
            h_line = i+1;
        }
        i++;
    }
    fclose(inp);
    rename(path_txt, path);
    int count = i;
    int g = find_cycle(data, h_line);
    if (g)
    {
        printf("≈сть циклы во вложенных файлах");
    }
    else
    {
        printf("Ќет циклов во вложенных файлах");
    }
    char names[100][100];
    struc functions* current = (functions*)
    malloc(sizeof(functions));
    current->cur = 0;
    current->cur_link = 0;
    for (int i = 0; i < 100; ++i)
    {
        current->line[i] = 0;
        for (int j = 0; j < 100; ++j)
        {
            current->f[i][j] = '\0';
            current->links[i][j] = '\0';
        }
    }
    for (int i = 0; i < count; i++)
    {
        function_detector(data[i], names, current, i, 0);
    }
    for (int i = 0; i < count; i++)
    {
        function_detector(data[i], names, current, i, 1);
    }
    struc variables* current2 = (variables*)
    malloc(sizeof(variables));
    current2->cur = 0;
    current2->cur_f = 0;
    for (int i = 0; i < 1000; ++i)
    {
        current2->line[i] = 0;
        for (int j = 0; j < 100; ++j)
        {
            current2->v[i][j] = '\0';
        }
    }
    int p = 0;
    for (int i = 0; i < count; i++)
    {
        if (variables_detector(data[i], names, current, current2, i, 0))
        {
            p = 1;
        }
    }
    if (p == 1)
    {
        printf("\nЌе все переменные получают начальные значени€\n");
    }
    else
    {
        printf("¬се переменные получают начальные значени€\n");
    }
    int f;
    function_using(current);
    recursion(current);
    nested_loops(data, count);
    FILE* fw = fopen("inf.txt", "w");
    char r[20] = "(recursive)";
    int iskl[100];
    int iskl_c = 0;
    for (int i = 0; i < current->cur_link; i++)
    {
        if (i % 2 == 0)
        {
            if (equal(current->links[i], current->links[i+1],strlen(current->links[i]),0) && strlen(current->links[i])==strlen(current->links[i+1]))
            {
                int y = strlen(current->links[i]);
                for (int p = 0;p < current->cur_link;++p)
                {
                    if (i!=p && (equal(current->links[i], current->links[p], strlen(current->links[p]), 0) && strlen(current->links[p]) == strlen(current->links[i])))
                    {
                        for (int j = strlen(current->links[p]); j < strlen(current->links[i]) + strlen(r); ++j)
                        {
                            current->links[p][j] = r[j - y];
                        }
                    }
                }
                p = i;
                for (int j = strlen(current->links[p]); j < strlen(current->links[i]) + strlen(r); ++j)
                {
                    current->links[p][j] = r[j - y];
                }
                iskl[iskl_c] = i;
                iskl_c++;
                iskl[iskl_c] = i+1;
                iskl_c++;
            }
        }
    }
    for (int i = 0; i < current->cur_link; i++)
    {
        int z = 1;
        for (int j = 0; j < iskl_c;++j)
        {
            if (i == iskl[j])
            {
                z = 0;
            }
        }
        if (z)
        {
            fprintf(fw, "%s\n", current->links[i]);
        }
    }
    forma(data, data2);
}

